#!/usr/bin/env python3
# apply_tecnaria_patch_full.py
# Patcher unico: aggiorna JSON (overview) + patch app.py (overview helpers + UTF-8 JSONResponse)
import os, re, json, sys, io
from datetime import datetime

FAMS = ["CTF","CTL","VCEM","CEME","CTCEM","GTS","P560"]

Q_OVERVIEW = {
 "CTF":  ["Parlami dei connettori CTF","CTF: overview","Che cosa sono i CTF","Descrizione CTF","CTF: posa e attrezzatura","CTF su lamiera grecata","Spiega CTF","CTF: introduzione","ctf overview","ctf"],
 "CTL":  ["Parlami dei CTL","CTL: overview","Che cosa sono i CTL","Descrizione CTL","Spiega CTL","CTL: introduzione","ctl overview","ctl"],
 "VCEM": ["Parlami di VCEM","VCEM: overview","Che cosa è VCEM","VCEM su essenze dure","Spiega VCEM","VCEM: introduzione","vcem overview","vcem"],
 "CEME": ["Parlami di CEM-E","CEM-E: overview","Che cosa è CEM-E","CEM-E posa a secco","Spiega CEM-E","CEM-E: introduzione","ceme overview","ceme"],
 "CTCEM":["Parlami di CTCEM","CTCEM: overview","Che cosa è CTCEM","CTCEM usa resine","Spiega CTCEM","CTCEM: introduzione","ctcem overview","ctcem"],
 "GTS":  ["Parlami di GTS","GTS: overview","Che cos'è GTS","Descrizione GTS","Spiega GTS","GTS: introduzione","gts overview","gts"],
 "P560": ["Parlami della P560","P560: overview","Che cos'è la P560","Descrizione P560","Spiega P560","P560: chiodatrice per CTF","p560 overview","p560"]
}

TEXT_OVERVIEW = {
 "CTF":  "I connettori CTF Tecnaria sono pensati per collegamenti su lamiera grecata e travi in acciaio, con posa a sparo tramite SPIT P560 (kit Tecnaria) e 2 chiodi HSBR14 per connettore. Vantaggi: rapidità, ripetibilità, affidabilità. Verificare lamiera/supporto e scegliere i propulsori corretti. Riferimenti: schede Tecnaria/ETA.",
 "CTL":  "I connettori CTL coprono casi d'uso diversi rispetto ai CTF. La scelta CTF vs CTL dipende da supporto, portata/rigidezza richiesta, accessibilità e attrezzatura. Riferimenti: manuali Tecnaria/ETA.",
 "VCEM": "VCEM è la famiglia Tecnaria per collegamenti su legno; su essenze dure è consigliato un preforo ~70–80% del diametro della vite per evitare fessurazioni e garantire la corretta coppia. Seguire schede Tecnaria.",
 "CEME": "La famiglia CEM-E (CTCEM/VCEM per laterocemento) prevede posa meccanica a secco. Verificare codici/consumi e condizioni operative secondo indicazioni Tecnaria.",
 "CTCEM":"CTCEM è alternativa alle soluzioni barre+resina nel laterocemento: posa meccanica (a secco). Incisione, preforo, pulizia foro, avvitatura fino a battuta.",
 "GTS":  "GTS è una famiglia per collegamenti/irrobustimenti acciaio–calcestruzzo. Per la scelta consultare schede Tecnaria e assistenza tecnica.",
 "P560": "SPIT P560 (con kit Tecnaria) è la chiodatrice ammessa per la posa dei CTF su lamiera/travi. Selezionare i propulsori in base a supporto/spessori; per ciascun connettore CTF usare 2 chiodi HSBR14."
}

def ensure_overview(qa, fam):
    # se esiste 'overview', rinforza Q e testo; altrimenti crea blocco overview in testa
    for item in qa:
        if isinstance(item, dict) and item.get("cat") == "overview":
            qs = set(item.get("q") or [])
            for v in Q_OVERVIEW.get(fam, []):
                qs.add(v); qs.add(v.lower()); qs.add(v.replace("?",""))
            item["q"] = sorted(qs)
            if not item.get("id"): item["id"] = f"{fam}-OVERVIEW-0001"
            if not item.get("text"): item["text"] = TEXT_OVERVIEW.get(fam,"")
            return True
    new = {
        "id": f"{fam}-OVERVIEW-0001",
        "cat": "overview",
        "q": sorted(set(Q_OVERVIEW.get(fam, []) + [q.lower() for q in Q_OVERVIEW.get(fam,[])] + [q.replace("?","") for q in Q_OVERVIEW.get(fam,[])])),
        "text": TEXT_OVERVIEW.get(fam,"")
    }
    qa.insert(0, new)
    return True

def patch_json_file(path):
    try:
        with open(path, encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        return False, "READ_FAIL"
    if isinstance(data, dict) and isinstance(data.get("qa"), list):
        qa = data["qa"]
    elif isinstance(data, list):
        qa = data; data = {"qa": qa}
    else:
        return False, "SCHEMA"

    fam = None
    base = os.path.basename(path).lower()
    for f in FAMS:
        if f.lower() in base:
            fam = f; break
    if not fam:
        blob = json.dumps(data, ensure_ascii=False).lower()
        for f in FAMS:
            if re.search(rf"\\b{re.escape(f.lower())}\\b", blob):
                fam = f; break
    if not fam:
        return False, "NOFAM"

    changed = ensure_overview(qa, fam)
    if changed:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    return changed, fam

INJECT_HELPERS = r
